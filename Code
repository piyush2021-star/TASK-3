<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Dashboard</title>
    <style>
        /* ====== GLOBAL STYLES ====== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f8f9fa;
            color: #343a40;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* ====== HEADER STYLES ====== */
        header {
            background: linear-gradient(135deg, #2c3e50, #1a2a3a);
            color: white;
            padding: 30px 0;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 600;
        }

        /* ====== SEARCH SECTION ====== */
        .search-section {
            background-color: white;
            padding: 25px;
            border-radius: 10px;
            margin: 25px 0;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        .search-container {
            display: flex;
            justify-content: center;
            gap: 12px;
        }

        #city-input {
            flex-grow: 1;
            max-width: 400px;
            padding: 14px 18px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

        #city-input:focus {
            outline: none;
            border-color: #4a6fa5;
            box-shadow: 0 0 0 3px rgba(74, 111, 165, 0.2);
        }

        #search-btn {
            padding: 14px 28px;
            background-color: #4a6fa5;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: background-color 0.3s, transform 0.1s;
        }

        #search-btn:hover {
            background-color: #3a5a80;
        }

        #search-btn:active {
            transform: scale(0.98);
        }

        /* ====== WEATHER DISPLAY ====== */
        .weather-section {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }

        .current-weather {
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
            text-align: center;
        }

        .current-weather h2 {
            font-size: 2rem;
            margin-bottom: 15px;
            color: #2c3e50;
            font-weight: 600;
        }

        .weather-main {
            margin: 20px 0;
        }

        .temperature {
            font-size: 3rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 10px 0;
        }

        .description {
            font-size: 1.2rem;
            color: #6c757d;
            text-transform: capitalize;
            margin-bottom: 15px;
        }

        .weather-info {
            display: flex;
            justify-content: center;
            align-items: stretch;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }

        .weather-detail {
            flex: 1;
            min-width: 150px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .weather-detail:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .weather-detail h3 {
            color: #4a6fa5;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .weather-detail p {
            font-size: 1.25rem;
            font-weight: 500;
        }

        /* ====== IMAGE CAROUSEL ====== */
        .carousel-section {
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            margin: 25px 0;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        .carousel-title {
            text-align: center;
            margin-bottom: 25px;
            color: #2c3e50;
            font-weight: 600;
        }

        .carousel-container {
            position: relative;
            max-width: 800px;
            margin: 0 auto;
            overflow: hidden;
            border-radius: 10px;
            height: 400px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        }

        .carousel-slide {
            display: none;
            width: 100%;
            height: 100%;
        }

        .carousel-slide.active {
            display: block;
        }

        .carousel-slide img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .carousel-caption {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
            color: white;
            padding: 20px;
            text-align: center;
        }

        .carousel-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(0, 0, 0, 0.4);
            color: white;
            border: none;
            padding: 15px;
            cursor: pointer;
            font-size: 1.5rem;
            z-index: 10;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s, transform 0.1s;
        }

        .carousel-btn:hover {
            background-color: rgba(0, 0, 0, 0.6);
        }

        .carousel-btn:active {
            transform: translateY(-50%) scale(0.95);
        }

        .prev-btn {
            left: 15px;
        }

        .next-btn {
            right: 15px;
        }

        .carousel-indicators {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-top: 20px;
        }

        .indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #dee2e6;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
        }

        .indicator:hover {
            transform: scale(1.2);
        }

        .indicator.active {
            background-color: #4a6fa5;
        }

        /* ====== LOADING AND ERROR STATES ====== */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .spinner {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #4a6fa5;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 18px;
            border-radius: 6px;
            margin: 20px 0;
            text-align: center;
            border-left: 5px solid #dc3545;
        }

        /* ====== RESPONSIVE DESIGN WITH MEDIA QUERIES ====== */
        /* Mobile Devices */
        @media (max-width: 576px) {
            h1 {
                font-size: 1.8rem;
            }

            .search-container {
                flex-direction: column;
            }

            #city-input, #search-btn {
                width: 100%;
                max-width: none;
            }

            .carousel-container {
                height: 250px;
            }

            .carousel-btn {
                padding: 10px;
                width: 40px;
                height: 40px;
                font-size: 1.2rem;
            }

            .weather-detail {
                min-width: 100%;
            }
            
            .temperature {
                font-size: 2.5rem;
            }
        }

        /* Tablets */
        @media (min-width: 577px) and (max-width: 768px) {
            h1 {
                font-size: 2rem;
            }

            .carousel-container {
                height: 300px;
            }

            .weather-detail {
                min-width: calc(50% - 20px);
            }
        }

        /* Larger Tablets and Small Desktops */
        @media (min-width: 769px) and (max-width: 992px) {
            .weather-detail {
                min-width: calc(33.33% - 20px);
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Weather Dashboard</h1>
            <p>Get current weather conditions for any city worldwide</p>
        </div>
    </header>

    <div class="container">
        <section class="search-section">
            <div class="search-container">
                <input type="text" id="city-input" placeholder="Enter city name...">
                <button id="search-btn">Search</button>
            </div>
        </section>

        <div id="error-container"></div>

        <section class="weather-section">
            <div id="current-weather" class="current-weather">
                <h2>Enter a city to see weather information</h2>
            </div>
        </section>

        <section class="carousel-section">
            <h2 class="carousel-title">Weather Images</h2>
            <div class="carousel-container">
                <button class="carousel-btn prev-btn">❮</button>
                <button class="carousel-btn next-btn">❯</button>
                
                <div class="carousel-slide active">
                    <img src="C:\Users\Piyush Lonkar\Downloads\img (1).jpg" alt="Sunny day">
                    <div class="carousel-caption">Summer</div>
                </div>
                <div class="carousel-slide">
                    <img src="C:\Users\Piyush Lonkar\Downloads\img2 (1).avif" alt="Rainy day">
                    <div class="carousel-caption">Winter</div>
                </div>
                <div class="carousel-slide">
                    <img src="C:\Users\Piyush Lonkar\Downloads\img3.jpg" alt="Snowy day">
                    <div class="carousel-caption">Snow</div>
                </div>
                <div class="carousel-slide">
                    <img src="C:\Users\Piyush Lonkar\Downloads\img4.jpg" alt="Cloudy day">
                    <div class="carousel-caption">Rain</div>
                </div>
            </div>
            <div class="carousel-indicators">
                <span class="indicator active" data-index="0"></span>
                <span class="indicator" data-index="1"></span>
                <span class="indicator" data-index="2"></span>
                <span class="indicator" data-index="3"></span>
            </div>
        </section>
    </div>

    <script>
        // ====== CAROUSEL FUNCTIONALITY ======
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize carousel variables
            let currentSlide = 0;
            const slides = document.querySelectorAll('.carousel-slide');
            const indicators = document.querySelectorAll('.indicator');
            const totalSlides = slides.length;
            
            // Auto-advance carousel every 5 seconds
            let carouselInterval = setInterval(nextSlide, 5000);
            
            // Next and Previous button handlers
            document.querySelector('.next-btn').addEventListener('click', function() {
                clearInterval(carouselInterval);
                nextSlide();
                carouselInterval = setInterval(nextSlide, 5000);
            });
            
            document.querySelector('.prev-btn').addEventListener('click', function() {
                clearInterval(carouselInterval);
                prevSlide();
                carouselInterval = setInterval(nextSlide, 5000);
            });
            
            // Indicator click handlers
            indicators.forEach(indicator => {
                indicator.addEventListener('click', function() {
                    clearInterval(carouselInterval);
                    currentSlide = parseInt(this.getAttribute('data-index'));
                    updateSlide();
                    carouselInterval = setInterval(nextSlide, 5000);
                });
            });
            
            // Carousel navigation functions
            function nextSlide() {
                currentSlide = (currentSlide + 1) % totalSlides;
                updateSlide();
            }
            
            function prevSlide() {
                currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
                updateSlide();
            }
            
            function updateSlide() {
                // Hide all slides and deactivate all indicators
                slides.forEach(slide => slide.classList.remove('active'));
                indicators.forEach(indicator => indicator.classList.remove('active'));
                
                // Show current slide and activate current indicator
                slides[currentSlide].classList.add('active');
                indicators[currentSlide].classList.add('active');
            }

            // ====== WEATHER API FUNCTIONALITY ======
            const apiKey = '6d055e39ee237af35ca066f35474e9df'; // Sample API key (demo only)
            const searchBtn = document.getElementById('search-btn');
            const cityInput = document.getElementById('city-input');
            const currentWeatherContainer = document.getElementById('current-weather');
            const errorContainer = document.getElementById('error-container');
            
            // Search button click handler
            searchBtn.addEventListener('click', getWeather);
            
            // Enter key handler
            cityInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    getWeather();
                }
            });
            
            // Function to fetch weather data
            function getWeather() {
                const city = cityInput.value.trim();
                
                if (!city) {
                    showError('Please enter a city name');
                    return;
                }
                
                // Clear previous error messages
                errorContainer.innerHTML = '';
                
                // Show loading state
                currentWeatherContainer.innerHTML = `
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                `;
                
                // Fetch weather data from API
                fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('City not found');
                        }
                        return response.json();
                    })
                    .then(data => {
                        displayWeather(data);
                        updateCarouselBasedOnWeather(data.weather[0].main);
                    })
                    .catch(error => {
                        showError(error.message);
                        currentWeatherContainer.innerHTML = `<h2>Enter a city to see weather information</h2>`;
                    });
            }
            
            // Function to display weather data
            function displayWeather(data) {
                const cityName = data.name;
                const country = data.sys.country;
                const temperature = Math.round(data.main.temp);
                const feelsLike = Math.round(data.main.feels_like);
                const weatherDescription = data.weather[0].description;
                const weatherIcon = data.weather[0].icon;
                const humidity = data.main.humidity;
                const windSpeed = data.wind.speed;
                
                currentWeatherContainer.innerHTML = `
                    <h2>${cityName}, ${country}</h2>
                    <div class="weather-main">
                        <img src="https://openweathermap.org/img/wn/${weatherIcon}@2x.png" alt="${weatherDescription}">
                        <p class="temperature">${temperature}°C</p>
                        <p class="description">${weatherDescription}</p>
                    </div>
                    <div class="weather-info">
                        <div class="weather-detail">
                            <h3>Feels Like</h3>
                            <p>${feelsLike}°C</p>
                        </div>
                        <div class="weather-detail">
                            <h3>Humidity</h3>
                            <p>${humidity}%</p>
                        </div>
                        <div class="weather-detail">
                            <h3>Wind Speed</h3>
                            <p>${windSpeed} m/s</p>
                        </div>
                    </div>
                `;
            }
            
            // Function to show error messages
            function showError(message) {
                errorContainer.innerHTML = `
                    <div class="error-message">
                        ${message}
                    </div>
                `;
            }
            
            // Function to update carousel based on weather condition
            function updateCarouselBasedOnWeather(weatherMain) {
                // Weather conditions mapping to carousel slide indices
                const weatherToSlideMap = {
                    'Clear': 0, // Sunny
                    'Rain': 1,  // Rainy
                    'Snow': 2,  // Snowy
                    'Clouds': 3 // Cloudy
                };
                
                // If we have a mapping for this weather condition, show that slide
                if (weatherToSlideMap.hasOwnProperty(weatherMain)) {
                    currentSlide = weatherToSlideMap[weatherMain];
                    updateSlide();
                }
            }
        });
    </script>
</body>
</html>
